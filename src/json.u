use Optional None Some
use Text concat
use Either Left Right

use Json.Internal.Token Reserved Null True False Numeric Textual Err

-- ===================== this stuff is missing in the stdlib =====

namespace Either where

  map : (b -> c) -> Either a b -> Either a c
  map f e =
    match e with
      Left a  -> Left a
      Right b -> Right (f b)

  flatmap : (b -> Either a c) -> Either a b -> Either a c
  flatmap f e =
    match e with
      Left a  -> Left a
      Right b -> f b

  (>>=) : Either a b -> ( b -> Either a c) -> Either a c
  (>>=) e f = flatmap f e


namespace List where

  intersperse : a -> [a] -> [a]
  intersperse sep as =
    match List.at 0 as with
      None -> []
      Some a -> List.cons a (List.Internal.prependToAll sep (List.drop 1 as))

  namespace Internal where

    -- should not be exported
    prependToAll : a -> [a] -> [a]
    prependToAll p as = List.flatMap (a -> [p] ++ [a]) as

namespace Text where

  concat : [Text] -> Text
  concat = Sequence.foldl (Text.++) ""

  concatSeq : Text -> Text -> Text -> [Text] -> Text
  concatSeq head tail sep ts =
    head ++ Text.concat (List.intersperse sep ts) ++ tail

namespace Pair where

  (==) : (a -> a -> Boolean) -> (b -> b -> Boolean) -> (a, b) -> (a, b) -> Boolean
  (==) aeq beq p1 p2 =
    match (p1, p2) with
      ((a1, b1),(a2, b2)) -> (aeq a1 a2) && (beq b1 b2)

  fst : (a,b) -> a
  fst p = match p with
    (a,b) -> a

  snd : (a,b) -> b
  snd p = match p with
    (a,b) -> b

  with2 : b -> a -> (a, b)
  with2 b a = (a, b)


-- =======================================================================

-- | A JSON value represented as a Unison value.
type Json.Value = Object [(Text, Json.Value)]
                | Array [Json.Value]
                | String Text
                | Number Text -- there is no Scientific and Float has no Show/Format yet
                | Bool Boolean
                | Null

namespace Json where

  (Value.==) : Json.Value -> Json.Value -> Boolean
  (Value.==) a b =
    match (a,b) with
      (Json.Value.Null, Json.Value.Null)             -> true
      (Json.Value.Bool b1, Json.Value.Bool b2)       -> b1 == b2
      (Json.Value.String s1, Json.Value.String s2)   -> s1 == s2
      (Json.Value.Number s1, Json.Value.Number s2)   -> s1 == s2
      (Json.Value.Array a1, Json.Value.Array a2)     -> a1 == a2
      (Json.Value.Object o1, Json.Value.Object o2)   -> o1 == o2 -- TODO we should sort by key first
      _                                              -> false

  format : Json.Value -> Text
  format = cases
    Json.Value.String s -> "\"" ++ s ++ "\""
    Json.Value.Number f -> f
    Json.Value.Bool true -> "true"
    Json.Value.Bool false -> "false"
    Json.Value.Null -> "null"
    Json.Value.Object props -> Text.concatSeq "{" "}" "," (Sequence.map Internal.formatProp props)
    Json.Value.Array els -> Text.concatSeq "[" "]" "," (Sequence.map Json.format els)

  parse : Text -> Either Text Json.Value
  parse t =
    lexed = Json.lex t
    Either.flatmap (validateRemainingEmpty) (parseTokens lexed)

  validateRemainingEmpty : (a, [Json.Internal.Token]) -> Either Text a
  validateRemainingEmpty = cases
    (value, rest) | Sequence.size rest == 0 -> Right value
    (_    , rest) -> Left "Unexpected tokens found after root element" --TODO point to the location

  parseTokens : [Json.Internal.Token] -> Either Text (Json.Value, [Json.Internal.Token])
  parseTokens tokens =
    first = Sequence.at 0 tokens
    match first with
      Some (Reserved "{") -> Json.parseObject (List.drop 1 tokens)
      Some (Reserved "[") -> Json.parseArray (Sequence.drop 1 tokens)
      Some (other)        -> Either.map (Pair.with2 (Sequence.drop 1 tokens)) (Json.parseValue other)
      None                -> Left "Can't parse empty document to JSON"


  namespace Internal where

    formatProp : (Text, Json.Value) -> Text
    formatProp = cases
      (k, v) -> "\"" ++ k ++ "\"" ++ ":" ++ (Json.format v)

type Json.Internal.Token = Reserved Text -- {}[],:
                         | Textual Text -- "..."
                         | Numeric Text -- 997.6
                         | True
                         | False
                         | Null
                         | Err Text

(Json.Internal.Token.==) : Json.Internal.Token -> Json.Internal.Token -> Boolean
(Json.Internal.Token.==) a b =
  match (a,b) with
    (Null, Null)               -> true
    (True, True)               -> true
    (False, False)             -> false
    (Reserved t1, Reserved t2) -> t1 == t2
    (Textual t1, Textual t2)   -> t1 == t2
    (Numeric n1, Numeric n2)   -> n1 == n2
    (Err t1, Err t2)           -> t1 == t2
    _                          -> false


isNumeric: Text -> Boolean
isNumeric = cases
  -- TODO add Exponent notation support
    "."                              -> true
    n | (n >= "0") && (n <= "9")     -> true
    _                                -> false



-- in fact for json this can only be null
lexSymbol : Text -> Either Text (Json.Internal.Token, Text)
lexSymbol t =
  -- TODO limit parsing to max 5 chars to avoid DOS
  validate: Text -> Either Text Json.Internal.Token
  validate = cases
      "null"  -> Right Null
      "true"  -> Right True
      "false" -> Right False
      other   -> Left ("Unknown symbol: " ++ other)

  go : Text -> Text -> Either Text (Json.Internal.Token, Text)
  go acc rest =

    c = Text.take 1 rest
    match Text.size c with
      0 -> map (Pair.with2 rest) (validate acc)
      1 ->
        match c with
          "]"   -> map (Pair.with2 rest) (validate acc)
          "}"   -> map (Pair.with2 rest) (validate acc)
          "}"   -> map (Pair.with2 rest) (validate acc)
          ":"   -> map (Pair.with2 rest) (validate acc)
          ","   -> map (Pair.with2 rest) (validate acc)
          other -> go (acc ++ other) (Text.drop 1 rest)
  go "" t

lexString : Text -> Either Text (Json.Internal.Token, Text)
lexString t =
  go : Text -> Text -> Either Text (Json.Internal.Token, Text)
  go acc rest =
    c = Text.take 1 rest
    match Text.size c with
      0 -> Left "Missing closing \""
      1 ->
        match c with
          "\\"  -> go (acc ++ (Text.take 2 rest)) (Text.drop 2 rest)
          "\""  -> Right (Textual acc, Text.drop 1 rest)
          other -> go (acc ++ other) (Text.drop 1 rest)
  first = Text.take 1 t
  match first with
    "\"" -> go "" (Text.drop 1 t)
    _    -> Left "A String should start with \""

lexNumber : Text -> Either Text (Json.Internal.Token, Text)
lexNumber t =
  go : Text -> Text -> Either Text (Json.Internal.Token, Text)
  go acc rest =
    c = Text.take 1 rest
    match Text.size c with
      0 -> Right (Numeric acc, rest)
      1 ->
        match c with
          n | isNumeric n  -> go (acc ++ n) (Text.drop 1 rest)
          _                -> Right (Numeric acc, rest)
  first = Text.take 1 t
  match first with
    n | isNumeric n -> go "" t
    _               -> Left "A number should start with a 0-9 or . digit"


-- for now we do not support whitespace
Json.lex : Text -> [Json.Internal.Token]
Json.lex t =
    go : [Json.Internal.Token] -> Text -> [Json.Internal.Token]
    go acc t =
      c = Text.take 1 t
      match Text.size c with
        0 -> acc
        1 ->
            -- no pattern match on text yet
            match c with
              " "  -> go acc (Text.drop 1 t)
              "\n" -> go acc (Text.drop 1 t)
              "\t" -> go acc (Text.drop 1 t)
              "\r" -> go acc (Text.drop 1 t)
              "{"  -> go (acc ++ [Reserved "{"]) (Text.drop 1 t)
              "}"  -> go (acc ++ [Reserved "}"]) (Text.drop 1 t)
              "["  -> go (acc ++ [Reserved "["]) (Text.drop 1 t)
              "]"  -> go (acc ++ [Reserved "]"]) (Text.drop 1 t)
              ":"  -> go (acc ++ [Reserved ":"]) (Text.drop 1 t)
              ","  -> go (acc ++ [Reserved ","]) (Text.drop 1 t)
              "\"" ->
                match lexString t with
                  Right (token, rest) -> go (acc ++ [token]) rest
                  Left err -> [Err err]
              n | isNumeric n ->
                match lexNumber t with
                  Right (token, rest) -> go (acc ++ [token]) rest
                  Left err -> [Err err]
              other ->
                match lexSymbol t with
                  Right (token, rest) -> go (acc ++ [token]) rest
                  Left err -> [Err err]
    go [] t

Json.parseValue : Json.Internal.Token -> Either Text Json.Value
Json.parseValue = cases
  Textual t  -> Right (Json.Value.String t)
  Numeric n  -> Right (Json.Value.Number n)
  Null       -> Right Json.Value.Null
  True       -> Right (Json.Value.Bool true)
  False      -> Right (Json.Value.Bool false)
  Reserved r -> Left ("Unexpected token: " ++ r)
  Err e      -> Left e

Json.parseArray : [Json.Internal.Token] -> Either Text (Json.Value, [Json.Internal.Token])
Json.parseArray tokens =
  go : [Json.Value] -> [Json.Internal.Token] -> Either Text (Json.Value, [Json.Internal.Token])
  go acc tokens =
    parseRest et = match et with (el, tokens') ->
      t = Sequence.at 0 tokens'
      acc' = acc `snoc` el
      match t with
        None                -> Left "unclosed object"
        Some (Reserved ",") -> go acc' (Sequence.drop 1 tokens')
        Some (Reserved "]") -> Right (Json.Value.Array acc', Sequence.drop 1 tokens')
        Some other          -> Left "Expected , or ]" -- TODO show what was found
    Json.parseTokens tokens Either.>>= parseRest
  match (Sequence.at 0) tokens with
    Some (Reserved "]") -> Right (Json.Value.Array [], Sequence.drop 1 tokens)
    _ -> go [] tokens

Json.parseObject : [Json.Internal.Token] -> Either Text  (Json.Value, [Json.Internal.Token])
Json.parseObject tokens =
  go : [(Text,Json.Value)] -> [Json.Internal.Token] -> Either Text (Json.Value, [Json.Internal.Token])
  go acc tokens =
    key = Sequence.at 0 tokens
    colon = Sequence.at 1 tokens
    match (key, colon) with
      (Some (Textual key), Some(Reserved ":")) ->
        parseRest et = match et with (el, tokens') ->
          t = Sequence.at 0 tokens'
          acc' = acc `snoc` (key, el)
          match t with
            None                -> Left "unclosed object"
            Some (Reserved ",") -> go acc' (Sequence.drop 1 tokens')
            Some (Reserved "}") -> Right (Json.Value.Object acc', Sequence.drop 1 tokens')
            Some other          -> Left "Expected , or }" -- TODO show what was found
        Json.parseTokens (Sequence.drop 2 tokens) Either.>>= parseRest
      other -> Left "Expecting a string followed by a colon" -- TODO show what was found
  match (Sequence.at 0) tokens with
    Some (Reserved "}") -> Right (Json.Value.Object [], Sequence.drop 1 tokens)
    _ -> go [] tokens

-- -- ==== Tests below, to be transformed in real unit tests =======================


use test


test> Text.test.concat.ex1 = check(Text.concat ["foo", "bar"] == "foobar")
-- TODO create text generator
-- test> text.test.concat.prop1 =
--   go _ = a = !text
--          b = !text
--          expect ( (Text.size a) + (Text.size b) == Text.size (Text.concat [a, b]))
--   runs 100 go


test> Json.test.format.array.empty = check (Json.format (Json.Value.Array []) == "[]")
test> Json.test.format.array.nonempty = check (
    Json.format (Json.Value.Array [Json.Value.String "foo", Json.Value.String "bar"]) == "[\"foo\",\"bar\"]")
test> Json.test.format.obj = check let 
    jsobj = Object [("foo", Json.Value.Number "123")
                  ,("bar", Json.Value.Array [Json.Value.Null, Json.Value.String "test"])]
    actual = Json.format jsobj
    actual == "{\"foo\":123,\"bar\":[null,\"test\"]}"
test> Json.test.format.string = check(Json.format (Json.Value.String "123") == "\"123\"")

test> Json.test.lex.string = check(lex "\"test\"" == [Textual "test"])
test> Json.test.lex.string.incomplete = check(lex "\"test" == [Err "Missing closing \""])
test> Json.test.lex.number = check(lex "123" == [Numeric "123"])
test> Json.test.lex.array = check(lex "[123,456]" == [Reserved "[", Numeric "123", Reserved ",", Numeric "456", Reserved "]"])
test> Json.test.lex.array.empty = check(lex "[]" == [Reserved "[", Reserved "]"])
test> Json.test.lex.array.null = check( Json.lex "[null]" == [Reserved "[", Null, Reserved "]"] )
test> Json.test.lex.emptyobject = check let 
  actual = lex "{}"
  expected = [Reserved "{", Reserved "}"]
  expected == actual
test> Json.test.lex.notnumber = check(lex "12x" == [Err "Unknown symbol: x"])
test> Json.test.lex.stringarray = check( Json.lex "[\"test\"]" == [Reserved "[", Textual "test", Reserved "]"])
test> Json.test.lex.stringarray3 = check let 
  actual = Json.lex "[\"test\",\"bar\"]"
  expected = [Reserved "[", Textual "test", Reserved ",", Textual "bar", Reserved "]"]
  expected == actual
test> Json.test.lex.symbol = check( Json.lex "true" == [True])
test> Json.test.lex.object = check let 
  actual = Json.lex "{\"foo\":123}"
  expected = [Reserved "{", Textual "foo", Reserved ":", Numeric "123", Reserved "}"]
  expected == actual
test> Json.tests.lex.object2 = check let 
  expected = [ Reserved "{"
             , Textual "foo"
             , Reserved ":"
             , Numeric "123"
             , Reserved ","
             , Textual "bar"
             , Reserved ":"
             , Reserved "["
             , Null
             , Reserved ","
             , Textual "test"
             , Reserved "]"
             , Reserved "}"
             ]
  lex "{\"foo\":123,\"bar\":[null,\"test\"]}" == expected

test> Json.test.lexString.ex1 = check let
  actual = lexString "\"abc\",123,true]"
  expected = Right (Textual "abc", ",123,true]")
  expected == actual
test> Json.test.lexString.ex2 = check(lexString "\"\"" == Right (Textual "", ""))
test> Json.test.lexString.empty = check(lexString "" == Left "A String should start with \"")
test> Json.test.lexString.missingquote = check(lexString "abc" == Left "A String should start with \"")

test> Json.test.lexNumber.ex1 = check(lexNumber "3.14" == Right (Numeric "3.14", ""))
test> Json.test.lexNumber.ex2 = check(lexNumber "3.14,true]}" == Right (Numeric "3.14", ",true]}"))
test> Json.test.lexNumber.failstring = check(lexNumber "abc" == Left "A number should start with a 0-9 or . digit")
test> Json.test.lexNumber.failempty = check(lexNumber "" == Left "A number should start with a 0-9 or . digit")

test> Json.test.lexSymbol.True = check(lexSymbol "true" == Right (True, ""))
test> Json.test.lexSymbol.Null = check(lexSymbol "null,true]}" == Right (Null, ",true]}"))
test> Json.test.lexSymbol.Null2 = check(lexSymbol "null]}"  == Right (Null, "]}"))
test> Json.test.lexSymbol.fail = check(lexSymbol "abc"  == Left "Unknown symbol: abc")

test> Json.test.parse.number = check(Json.parse "123" == Right (Number "123"))
test> Json.test.parse.Null = check(Json.parse "null" == Right Json.Value.Null)
test> Json.test.parse.bool = check(Json.parse "true" == Right (Json.Value.Bool true))
test> Json.test.parse.array.empty = check(Json.parse "[]" == Right (Json.Value.Array []))
test> Json.test.parse.array.deep = check let 
  jsonstr = "[1,2,[true,false]]"
  expected = Json.Value.Array [Number "1"
                              ,Number "2"
                              ,Json.Value.Array [Json.Value.Bool true
                                                ,Json.Value.Bool false
                                                ]
                              ]
  Json.parse jsonstr == Right expected
test> Json.test.parse.object.empty = check(Json.parse "{}" == Right (Json.Value.Object []))
test> Json.test.parse.object.valid = check let 
  jsonstr = "{\"foo\":123,\"bar\":[null,\"test\"]}"
  expected = Right (Json.Value.Object [("foo", Number "123"), ("bar", Array [Json.Value.Null, String "test"])])
  Json.parse jsonstr == expected
test> Json.test.parse.discardwhitespace = check let
  jsonstr = "\n   {    \"foo\"   \t:123   ,\n\n   \"bar\" : [null,   \"test\"]  }   "
  expected = Right (Json.Value.Object [("foo", Number "123"), ("bar", Array [Json.Value.Null, String "test"])])
  Json.parse jsonstr == expected
test> Json.test.parse.object.failinvalid = check(Json.parse "{:}" == Left "Expecting a string followed by a colon")
test> Json.test.parse.object.failinvalid2 = check(Json.parse "{\"test\":}" == Left "Unexpected token: }")
test> Json.test.parse.failunexpected = check(Json.parse ":" == Left "Unexpected token: :")
test> Json.test.parse.failempty = check(Json.parse "" == Left "Can't parse empty document to JSON")

-- FIXME handle escapes, see https://json.org/
-- test> Json.test.parse.stringescapes = check let
--   actual = Json.parse "\"\\\\\""
--   expected = Right (Json.Value.String "\\")
--   --actual == expected
--   if not (expected == actual) then
--     bug ("Not equal!", expected, actual)
--   else
--     true

-- TODO two way tests encode - decode / decode - encode
-- > match (Json.parse "{\"foo\":123,\"bar\":[null,\"test\"]}") with Either.Right a -> Json.format a
